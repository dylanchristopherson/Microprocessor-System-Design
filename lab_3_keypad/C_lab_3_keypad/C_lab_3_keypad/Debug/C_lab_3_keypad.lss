
C_lab_3_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062e  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000522  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000191  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e0       	ldi	r30, 0x00	; 0
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 37       	cpi	r26, 0x70	; 112
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	3a d0       	rcall	.+116    	; 0xba <main>
  46:	5a c0       	rjmp	.+180    	; 0xfc <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <scan>:
}

char scan()
{
	char temp, key, i;
	PORTD=0x0f;
  4a:	8f e0       	ldi	r24, 0x0F	; 15
  4c:	82 bb       	out	0x12, r24	; 18
	
	do {
		temp=PIND;			// Reads value from PIN D		
  4e:	80 b3       	in	r24, 0x10	; 16
	} while (temp != 0x0f);
  50:	8f 30       	cpi	r24, 0x0F	; 15
  52:	e9 f7       	brne	.-6      	; 0x4e <scan+0x4>
	
	// Checks which key is pressed on the rows
	while (1) {
		for(i = 0; i <=3; i++) {
			temp = ~(0x80 >>i);     //~(0b1000 0000)
  54:	40 e8       	ldi	r20, 0x80	; 128
  56:	50 e0       	ldi	r21, 0x00	; 0
{
	while(--value);
}

char scan()
{
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
	} while (temp != 0x0f);
	
	// Checks which key is pressed on the rows
	while (1) {
		for(i = 0; i <=3; i++) {
			temp = ~(0x80 >>i);     //~(0b1000 0000)
  5c:	ca 01       	movw	r24, r20
  5e:	02 2e       	mov	r0, r18
  60:	02 c0       	rjmp	.+4      	; 0x66 <scan+0x1c>
  62:	95 95       	asr	r25
  64:	87 95       	ror	r24
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <scan+0x18>
  6a:	80 95       	com	r24
			PORTD=temp;
  6c:	82 bb       	out	0x12, r24	; 18
			key=PIND;
  6e:	90 b3       	in	r25, 0x10	; 16
			if(key!=temp)
  70:	89 17       	cp	r24, r25
  72:	19 f0       	breq	.+6      	; 0x7a <scan+0x30>
			{
				delay(20);
				key=PIND;
  74:	90 b3       	in	r25, 0x10	; 16
				if(key!=temp) return (key);
  76:	89 13       	cpse	r24, r25
  78:	06 c0       	rjmp	.+12     	; 0x86 <scan+0x3c>
  7a:	2f 5f       	subi	r18, 0xFF	; 255
  7c:	3f 4f       	sbci	r19, 0xFF	; 255
		temp=PIND;			// Reads value from PIN D		
	} while (temp != 0x0f);
	
	// Checks which key is pressed on the rows
	while (1) {
		for(i = 0; i <=3; i++) {
  7e:	24 30       	cpi	r18, 0x04	; 4
  80:	31 05       	cpc	r19, r1
  82:	61 f7       	brne	.-40     	; 0x5c <scan+0x12>
  84:	e9 cf       	rjmp	.-46     	; 0x58 <scan+0xe>
				key=PIND;
				if(key!=temp) return (key);
			}
		}
	}	
}
  86:	89 2f       	mov	r24, r25
  88:	08 95       	ret

0000008a <gotkey>:
// test if a key was pressed
char gotkey()
{
	char temp;
	int i;
	temp=scan();
  8a:	df df       	rcall	.-66     	; 0x4a <scan>
	for (i=0; i<=15; i++) 
		if (temp == key_code[i]) return(i);
  8c:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
  90:	89 17       	cp	r24, r25
  92:	41 f0       	breq	.+16     	; 0xa4 <gotkey+0x1a>
  94:	e1 e6       	ldi	r30, 0x61	; 97
  96:	f0 e0       	ldi	r31, 0x00	; 0
char gotkey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++) 
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
		if (temp == key_code[i]) return(i);
  9c:	91 91       	ld	r25, Z+
  9e:	89 13       	cpse	r24, r25
  a0:	05 c0       	rjmp	.+10     	; 0xac <gotkey+0x22>
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <gotkey+0x1e>
char gotkey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++) 
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
		if (temp == key_code[i]) return(i);
  a8:	82 2f       	mov	r24, r18
  aa:	08 95       	ret
char gotkey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++) 
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	20 31       	cpi	r18, 0x10	; 16
  b2:	31 05       	cpc	r19, r1
  b4:	99 f7       	brne	.-26     	; 0x9c <gotkey+0x12>
		if (temp == key_code[i]) return(i);
	return(16);
  b6:	80 e1       	ldi	r24, 0x10	; 16
}
  b8:	08 95       	ret

000000ba <main>:
int main(void)
{
    char keys;
	// Port B initialization
	
	PORTB=0x00;
  ba:	18 ba       	out	0x18, r1	; 24
	DDRB=0xff;	// outputs connected to leds
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	
	// Port D initialization
	PORTD=0x00;
  c0:	12 ba       	out	0x12, r1	; 18
	DDRD=0xF0;		// portd (7-4) keypad outputs
  c2:	80 ef       	ldi	r24, 0xF0	; 240
  c4:	81 bb       	out	0x11, r24	; 17
	{
		// Place your code here
		keys = gotkey();
		
		while (keys > 0) {
			PORTB=0xFF;
  c6:	cf ef       	ldi	r28, 0xFF	; 255
	DDRD=0xF0;		// portd (7-4) keypad outputs
					// portd (3-0) keypad outputs
	while (1)
	{
		// Place your code here
		keys = gotkey();
  c8:	e0 df       	rcall	.-64     	; 0x8a <gotkey>
		
		while (keys > 0) {
  ca:	88 23       	and	r24, r24
  cc:	e9 f3       	breq	.-6      	; 0xc8 <main+0xe>
			PORTB=0xFF;
  ce:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	30 e7       	ldi	r19, 0x70	; 112
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x26>
  e0:	00 00       	nop
			_delay_ms(200);
			PORTB=0x00;
  e2:	18 ba       	out	0x18, r1	; 24
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	30 e7       	ldi	r19, 0x70	; 112
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x30>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x3a>
  f4:	00 00       	nop
			_delay_ms(200);
			keys=keys-1;	
  f6:	81 50       	subi	r24, 0x01	; 1
	while (1)
	{
		// Place your code here
		keys = gotkey();
		
		while (keys > 0) {
  f8:	51 f7       	brne	.-44     	; 0xce <main+0x14>
  fa:	e6 cf       	rjmp	.-52     	; 0xc8 <main+0xe>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>

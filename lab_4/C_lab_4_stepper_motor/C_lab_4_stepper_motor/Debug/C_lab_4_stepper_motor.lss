
C_lab_4_stepper_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ce  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000527  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002eb  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e6       	ldi	r30, 0x64	; 100
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 37       	cpi	r26, 0x78	; 120
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	7e d0       	rcall	.+252    	; 0x142 <main>
  46:	8c c0       	rjmp	.+280    	; 0x160 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <scan>:

// scan for pressed key
char scan()
{
	char temp, key, i;	
	PORTD = 0x0f;
  4a:	8f e0       	ldi	r24, 0x0F	; 15
  4c:	82 bb       	out	0x12, r24	; 18
	
	do {
		temp=PIND;
  4e:	80 b3       	in	r24, 0x10	; 16
	} while (temp!=0x0f);
  50:	8f 30       	cpi	r24, 0x0F	; 15
  52:	e9 f7       	brne	.-6      	; 0x4e <scan+0x4>
	
	while(1)
	{
		for (i=0; i<= 3;i++) {
			temp = ~(0x80 >>i);
  54:	40 e8       	ldi	r20, 0x80	; 128
  56:	50 e0       	ldi	r21, 0x00	; 0
	while(--value);
}

// scan for pressed key
char scan()
{
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
	} while (temp!=0x0f);
	
	while(1)
	{
		for (i=0; i<= 3;i++) {
			temp = ~(0x80 >>i);
  5c:	ca 01       	movw	r24, r20
  5e:	02 2e       	mov	r0, r18
  60:	02 c0       	rjmp	.+4      	; 0x66 <scan+0x1c>
  62:	95 95       	asr	r25
  64:	87 95       	ror	r24
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <scan+0x18>
  6a:	80 95       	com	r24
			PORTD=temp;
  6c:	82 bb       	out	0x12, r24	; 18
			key=PIND;
  6e:	90 b3       	in	r25, 0x10	; 16
			if(key!=temp)
  70:	89 17       	cp	r24, r25
  72:	19 f0       	breq	.+6      	; 0x7a <scan+0x30>
			{		
				delay(20);
				key=PIND;
  74:	90 b3       	in	r25, 0x10	; 16
				if(key!=temp) return(key);
  76:	89 13       	cpse	r24, r25
  78:	06 c0       	rjmp	.+12     	; 0x86 <scan+0x3c>
  7a:	2f 5f       	subi	r18, 0xFF	; 255
  7c:	3f 4f       	sbci	r19, 0xFF	; 255
		temp=PIND;
	} while (temp!=0x0f);
	
	while(1)
	{
		for (i=0; i<= 3;i++) {
  7e:	24 30       	cpi	r18, 0x04	; 4
  80:	31 05       	cpc	r19, r1
  82:	61 f7       	brne	.-40     	; 0x5c <scan+0x12>
  84:	e9 cf       	rjmp	.-46     	; 0x58 <scan+0xe>
				key=PIND;
				if(key!=temp) return(key);
			}	
		}	
	}
}
  86:	89 2f       	mov	r24, r25
  88:	08 95       	ret

0000008a <gotKey>:

char gotKey()
{
	char temp;
	int i;
	temp=scan();
  8a:	df df       	rcall	.-66     	; 0x4a <scan>
	for (i=0; i<=15; i++)
		if (temp==key_code[i]) return(i);
  8c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <key_code>
  90:	89 17       	cp	r24, r25
  92:	41 f0       	breq	.+16     	; 0xa4 <gotKey+0x1a>
  94:	e9 e6       	ldi	r30, 0x69	; 105
  96:	f0 e0       	ldi	r31, 0x00	; 0
char gotKey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++)
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
		if (temp==key_code[i]) return(i);
  9c:	91 91       	ld	r25, Z+
  9e:	89 13       	cpse	r24, r25
  a0:	05 c0       	rjmp	.+10     	; 0xac <gotKey+0x22>
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <gotKey+0x1e>
char gotKey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++)
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
		if (temp==key_code[i]) return(i);
  a8:	82 2f       	mov	r24, r18
  aa:	08 95       	ret
char gotKey()
{
	char temp;
	int i;
	temp=scan();
	for (i=0; i<=15; i++)
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	20 31       	cpi	r18, 0x10	; 16
  b2:	31 05       	cpc	r19, r1
  b4:	99 f7       	brne	.-26     	; 0x9c <gotKey+0x12>
		if (temp==key_code[i]) return(i);
	return(16);
  b6:	80 e1       	ldi	r24, 0x10	; 16
}
  b8:	08 95       	ret

000000ba <runForward>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	97 e2       	ldi	r25, 0x27	; 39
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <runForward+0x4>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <runForward+0xa>
  c4:	00 00       	nop
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
	{
		_delay_ms(10);			// delay adjusts the speed of the motor, picked by user
		PORTC = forward[i];		// send motor the next hex value from the sequence
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	2c e2       	ldi	r18, 0x2C	; 44
  ce:	31 e0       	ldi	r19, 0x01	; 1
		
		i=i+1;				// inc i
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <runForward+0x3e>
  d6:	ef e0       	ldi	r30, 0x0F	; 15
  d8:	f7 e2       	ldi	r31, 0x27	; 39
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <runForward+0x20>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <runForward+0x26>
  e0:	00 00       	nop
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
	{
		_delay_ms(10);			// delay adjusts the speed of the motor, picked by user
		PORTC = forward[i];		// send motor the next hex value from the sequence
  e2:	fc 01       	movw	r30, r24
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	40 81       	ld	r20, Z
  ea:	45 bb       	out	0x15, r20	; 21
		
		i=i+1;				// inc i
  ec:	01 96       	adiw	r24, 0x01	; 1
		j=j+1;				// inc j
		if(i == 8)		// reset i back to 0 when it reaches the end of the sequence
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	91 05       	cpc	r25, r1
  f2:	11 f4       	brne	.+4      	; 0xf8 <runForward+0x3e>
		{
			i=0;	
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
void runForward()
{
	int i = 0;
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
  fc:	61 f7       	brne	.-40     	; 0xd6 <runForward+0x1c>
		if(i == 8)		// reset i back to 0 when it reaches the end of the sequence
		{
			i=0;	
		}
	}
}
  fe:	08 95       	ret

00000100 <runBackward>:
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <runBackward+0x4>
 108:	00 c0       	rjmp	.+0      	; 0x10a <runBackward+0xa>
 10a:	00 00       	nop
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
	{
		_delay_ms(4);			// delay adjusts the speed of the motor, picked by user
		PORTC = forward[i];		// send motor the next hex value from the sequence
 10c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__data_start+0x7>
 110:	85 bb       	out	0x15, r24	; 21
 112:	2c e2       	ldi	r18, 0x2C	; 44
 114:	31 e0       	ldi	r19, 0x01	; 1
		
		i--;				// dec i
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0f c0       	rjmp	.+30     	; 0x13a <runBackward+0x3a>
 11c:	ef e9       	ldi	r30, 0x9F	; 159
 11e:	ff e0       	ldi	r31, 0x0F	; 15
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <runBackward+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <runBackward+0x26>
 126:	00 00       	nop
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
	{
		_delay_ms(4);			// delay adjusts the speed of the motor, picked by user
		PORTC = forward[i];		// send motor the next hex value from the sequence
 128:	fc 01       	movw	r30, r24
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	40 81       	ld	r20, Z
 130:	45 bb       	out	0x15, r20	; 21
		
		i--;				// dec i
 132:	01 97       	sbiw	r24, 0x01	; 1
		j++;				// inc j
		
		if(i == 0)		// reset i back to 0 when it reaches the end of the sequence
 134:	11 f4       	brne	.+4      	; 0x13a <runBackward+0x3a>
			i=7;
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	31 09       	sbc	r19, r1
void runBackward()
{
	int i = 7;
	int j = 0;
	
	while(j<300)				// motor runs for 200 iterations of the hex sequence
 13e:	71 f7       	brne	.-36     	; 0x11c <runBackward+0x1c>
		j++;				// inc j
		
		if(i == 0)		// reset i back to 0 when it reaches the end of the sequence
			i=7;
	}
}
 140:	08 95       	ret

00000142 <main>:
{
	char keys;
	
	// Port C initialization
	// Port C is the motor input
	PORTC=0x00;
 142:	15 ba       	out	0x15, r1	; 21
	DDRC=0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
	
	// Port D initialization
	// Port D is the keypad
	PORTD=0x00;
 148:	12 ba       	out	0x12, r1	; 18
	DDRD=0xF0;
 14a:	80 ef       	ldi	r24, 0xF0	; 240
 14c:	81 bb       	out	0x11, r24	; 17

	while(1)
	{
		keys=gotKey();
 14e:	9d df       	rcall	.-198    	; 0x8a <gotKey>
		
		if (keys == 0x0B) runBackward();   // if keys equals B
 150:	8b 30       	cpi	r24, 0x0B	; 11
 152:	11 f4       	brne	.+4      	; 0x158 <main+0x16>
 154:	d5 df       	rcall	.-86     	; 0x100 <runBackward>
 156:	fb cf       	rjmp	.-10     	; 0x14e <main+0xc>
			
		if (keys == 0x0F) runForward();	   // if keys equals F		
 158:	8f 30       	cpi	r24, 0x0F	; 15
 15a:	c9 f7       	brne	.-14     	; 0x14e <main+0xc>
 15c:	ae df       	rcall	.-164    	; 0xba <runForward>
 15e:	f7 cf       	rjmp	.-18     	; 0x14e <main+0xc>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
